#!/usr/bin/env ruby
require "bundler/setup"
require "lbpprint/print"
require 'open-uri'
require 'thor'
require 'yaml'
require 'nokogiri'
## forwardable depency is mysterious, it is invoked in the lbp library and should be required there instead of here, but until now has not appear to be necessary in other uses of library
require 'forwardable'
require 'lbp'


# Don't allow downloaded files to be created as StringIO. Force a tempfile to be created.
# this is required, but the StringIO can't be used as a file in the saxon processing command
OpenURI::Buffer.send :remove_const, 'StringMax' if OpenURI::Buffer.const_defined?('StringMax')
OpenURI::Buffer.const_set 'StringMax', 0


module LbpprintCLI
	class Core < Thor
		desc "version", "ask for lbp-print version"
		def version
			puts Lbpprint::Print::VERSION
		end
		desc "xslt_package_version_number", "get xslt package version number"
		def xslt_package_version_number(package_path)
			## needed /. after package_path so that I would go into the directory and then get the corrected dir name
			xslt_package_version_number =`cd -P "$( dirname "#{package_path}/." )" && git describe --tags --always`
		end
		desc "source_doc_version_number", "get source doc version number"
		def source_doc_version_number(filename="dev")
			#sourceversion=`git describe --tags --always`
			# sourceversion=`shasum #{filename}`
			# ipfsversion=`ipfs add #{filename}`
			# ipfshash = ipfsversion.split(" ")[1]
			# return sourceversion[0...8] + "/" + ipfshash[0...8]
			return sourceversion[0...8]
		end
		desc "tex", "creates latex output"
		option :pdf_output, :type => :boolean, :alias => "-pdf", :desc => "If this is given, the tex-file will be compiled with pdflatex."
		option :cloud, :type => :boolean, :alias => "-c", :desc => "If cloud flag is present, the lbp-script will grab the designated file by its resource url or resource short id, rather than looking for the file on the local file system"
		option :output_parent, :alias => "-o", :desc => "A directory name inside the `output_base` directory where the files will be put."
		option :package, :alias => "-p", :desc => "The xslt package used for processing the XML file. This package must be a directory in the `xslt_base` directory."
		option :type, :alias => "-t", :desc => "Indicate whether the processor converts a file encoded according to the diplomatic of critical LBP schema."
		option :schema, :alias => "-s", :desc => "Indicate which version of the LBP schema the XML is compliant with."
		def tex (filename)

			# Get file resource
			if options[:cloud]
				## at present filename should be short id at will only work for expression id (not manifestation or transcription id)
				## right now this is only set to work for expressions at the structureItem level
				resource = Lbp::Resource.find(filename)
				filename_base = filename
				file_resource = resource.canonical_transcription.resource.file.file
				filename = file_resource.path
			else
				# Sanity check on the file argument
				filename =
					if filename.split(".").last == "xml"
						filename_base = filename.split("/").last.split(".").first
						filename = filename
					elsif not filename.include? "."
						filename_base = filename
						filename = "#{filename}.xml"
					else
						raise ArgumentError, "The `filename` argument must have the extension `.xml` or nothing. It was #{filename}"
					end
			end

			# Initialize config file
			home_dir = ENV['HOME']
			config_file = File.join(home_dir, ".lbp-print", "config.yaml")
			config = YAML::load_file(config_file)

			# Get config data
			output_base = File.expand_path(config['output_base'])
			xslt_base = File.expand_path(config['xslt_base'])

			# Get parameters
			output_parent =
				if options["output_parent"]
					options["output_parent"]
				elsif config["default_params"] && config["default_params"]["output_parent"]
					config["default_params"]["output_parent"]
				else
					"examples"
				end

			package =
				if options["package"]
					options["package"]
				elsif config["default_params"] && config["default_params"]["package"]
					config["default_params"]["package"]
				else
					"lbp-print-xslt"
				end

			type =
				if options["type"]
					options["type"]
				elsif not Nokogiri::XML(open(File.expand_path(filename))).xpath("/tei:TEI/tei:text[1]/@type", 'tei' => 'http://www.tei-c.org/ns/1.0').empty?
					Nokogiri::XML(open(File.expand_path(filename))).xpath("/tei:TEI/tei:text[1]/@type", 'tei' => 'http://www.tei-c.org/ns/1.0').to_s
				elsif config["default_params"] && config["default_params"]["type"]
					config["default_params"]["type"]
				else
					"critical"
				end

			schema =
				if options["schema"]
					options["schema"]
				elsif not Nokogiri::XML(open(File.expand_path(filename))).xpath("/tei:TEI/tei:teiHeader[1]/tei:encodingDesc[1]/tei:schemaRef[1]/@n", 'tei' => 'http://www.tei-c.org/ns/1.0').empty?
					#get schema id, e.g lbp-critical-1.0.0
					schema_full = Nokogiri::XML(open(File.expand_path(filename))).xpath("/tei:TEI/tei:teiHeader[1]/tei:encodingDesc[1]/tei:schemaRef[1]/@n", 'tei' => 'http://www.tei-c.org/ns/1.0')
					## get number, e.g. 1.0.0
					schema_full.to_s.split("-").last
				elsif config["default_params"] && config["default_params"]["schema"]
					config["default_params"]["schema"]
				else
					"1.0.0"
				end

			puts "==============================="
			puts "Output base is: #{output_base}"
			puts "XSLT base is: #{xslt_base}"

			output_dir = File.expand_path(File.join(output_base, output_parent))
			puts "Output directory is: #{output_dir}"

			file_full_path = File.expand_path(File.join(output_dir, filename_base, "#{filename_base}.tex"))

			puts "schema number used: #{schema}"
			validating_schema = schema
			puts "schema type used: #{type}"
			transcription_type = type

			xslt_directory = File.join(xslt_base, package)
			xslt = File.join(xslt_directory, validating_schema, "#{transcription_type}.xslt")
			xslt_package_version_number = self.xslt_package_version_number(xslt_directory)

			puts "==============================="
			puts "xslt package version number"
			puts xslt_package_version_number
			puts "==============================="
			puts "source version number"
			source_doc_version_number = self.source_doc_version_number(filename)
			puts self.source_doc_version_number(filename)


			puts "==============================="
			puts "Begin TEI to LaTeX conversion"
			`saxon "-s:#{filename}" "-xsl:#{xslt}" "-o:#{file_full_path}" "conversionversion=#{xslt_package_version_number}" "sourceversion=#{source_doc_version_number}";`
			puts "creating file: #{file_full_path}"
			puts "End TEI to LaTeX conversion"
			puts "==============================="
			self.tex_clean(file_full_path)

			# render pdf
			if options[:pdf_output]
				Dir.chdir(File.join(output_dir, filename_base))
				puts "Creating PDF"
				`latexmk -pdf #{file_full_path}`
			end
		end
		desc "tex_clean", "removes unwanted spaces from output tex file"
		def tex_clean (file_full_path)
			#stream edit for unwanted spaces
			patterns = [
				's/ \{1,\}/ /g',           # ' {' => '{'
				's/{ /{/g',                # '{ ' => '{'
				's/ }/}/g',                # ' }' => '}'
				's/ :/:/g',                # ' :' => ':'
				's/} ,/},/g',              # '} ,' => '},'
				's/	*//g',               # '[tab]*' => ''
				's/ \(\\\footnote{\)/\1/g', # ' \footnote{' => '\footnote{'
				's/ \(\\\edtext{}\)/\1/g', # ' \edtext{}' => '\edtext{}'
				's/}\(\\\edtext{[^}]\)/} \1/g', # '}\edtext{...' => '} \edtext'
				's/ \([.,?!]\)/\1/g',      # ' [punctuation]' => '[punctuation]'
			]
			joined_pattern = patterns.map { |i| '-e ' + "'#{i}'" }.join(' ')
			sed_command = "sed -i.bak #{joined_pattern} #{file_full_path}"

			puts "Trying to remove whitespace..."
			system sed_command
			if $? != 0
				puts "Whitespace cleanup failed."
			else
				puts "Whitespace cleanup finished successfully."
			end

		end
	end
end


LbpprintCLI::Core.start(ARGV)
